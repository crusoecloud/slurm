- name: Configure autofs
  ansible.builtin.import_role:
    name: autofs
  when:
    - not use_vast_nfs | default(false) | bool
    
- name: Mount /scratch/local
  ansible.builtin.import_role:
    name: raid0
  vars:
    raid0_mount_path: /scratch/local
  when: (ansible_local.nvme.nvme.count | int) > 0 

- name: Mount /scratch/shared
  ansible.posix.mount:
    src: "slurm-nfs-node-0:/scratch/shared"
    path: /scratch/shared
    opts: rw,sync,soft
    state: mounted
    fstype: nfs
  when:
    - not use_vast_nfs | default(false) | bool
    - (hostvars['slurm-nfs-node-0'].ansible_local.nvme.nvme.count | int) > 0

- name: Mount vastnfs slurm_data_disk
  ansible.posix.mount:
    src: "100.64.0.2:/volumes/{{ slurm_data_disk_id | default(crusoe_storage_disk.slurm_data_disk[0].id) }}"
    path: "{{ slurm_data_disk_mount_path }}"
    opts: proto=tcp,nconnect=16,spread_reads,spread_writes,remoteports=100.64.0.2-100.64.0.17"
    state: mounted
    fstype: nfs
  when: use_vast_nfs | default(false) | bool

- name: Install override.conf
  ansible.builtin.template:
    src: override.conf
    dest: /etc/systemd/system/slurmd.service.d/override.conf
    owner: root
    group: root
    mode: '0755'

- name: Create symbolic link for NVML library
  ansible.builtin.file:
    src: /usr/lib/{{ ansible_architecture }}-linux-gnu/libnvidia-ml.so.1
    dest: /usr/lib/{{ ansible_architecture }}-linux-gnu/libnvidia-ml.so
    state: link
    
- name: Restart slurmd
  ansible.builtin.systemd_service:
    name: slurmd
    state: restarted
    enabled: true
    daemon_reload: true

- name: Mount all volumes
  ansible.posix.mount:
    src: "{{ item.name }}"
    path: "{{ item.mount_point }}"
    opts: rw,nofail
    state: mounted
    fstype: virtiofs
  loop: "{{ volumes | from_json }}"

- name: IMEX Support
  when: 
    - use_imex | default(false) |  bool
    - "'login' not in slurm_features | from_json"
  block:
  - name: Copy the hostfile to each node
    ansible.builtin.copy:
      src: ../../../imex_nodes.txt
      dest: /etc/nvidia-imex/nodes_config.cfg
      owner: root
      group: root
      mode: '0644'

  - name: Discover IMEX major number
    command: grep nvidia-caps-imex-channels /proc/devices
    register: imex_device

  - name: Create IMEX channel directory and node as root
    become: true
    block:
      - name: Ensure IMEX channel directory exists
        file:
          path: /dev/nvidia-caps-imex-channels
          state: directory
          mode: '0755'

      - name: Create channel0 device node
        command: mknod /dev/nvidia-caps-imex-channels/channel0 c {{ imex_device.stdout.split()[0] }} 0
        args:
          creates: /dev/nvidia-caps-imex-channels/channel0

  - name: Stop nvidia-imex service
    become: true
    ansible.builtin.systemd:
      name: nvidia-imex
      state: stopped

  - name: Start nvidia-imex service
    become: true
    ansible.builtin.systemd:
      name: nvidia-imex
      state: started
      enabled: yes